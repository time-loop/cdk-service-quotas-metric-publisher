"use strict";var d=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var Q=(e,t)=>{for(var a in t)d(e,a,{get:t[a],enumerable:!0})},f=(e,t,a,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of p(t))!S.call(e,r)&&r!==a&&d(e,r,{get:()=>t[r],enumerable:!(n=C(t,r))||n.enumerable});return e};var N=e=>f(d({},"__esModule",{value:!0}),e);var A={};Q(A,{monitor:()=>g});module.exports=N(A);var c=require("@aws-sdk/client-cloudwatch"),i=require("@aws-sdk/client-service-quotas"),g=async()=>{try{if(!process.env.CW_NAMESPACE)throw new Error("CW_NAMESPACE environment variable not set");if(!process.env.SERVICE_QUOTAS_LIST)throw new Error("SERVICE_QUOTAS_LIST environment variable not set");let e=process.env.CW_NAMESPACE,t=JSON.parse(process.env.SERVICE_QUOTAS_LIST),a=[],n=new i.ServiceQuotasClient;for(let o of t){console.log(`Getting service quota for ${o.serviceCode} - ${o.quotaCode}`);let m={ServiceCode:o.serviceCode,QuotaCode:o.quotaCode},u=new i.GetServiceQuotaCommand(m),s=await n.send(u);if(!s.Quota||Object.keys(s.Quota).length===0){console.error(`No quota found for ${o.serviceCode} - ${o.quotaCode}`);continue}console.log(`Successfully called getServiceQuota for ${o.serviceCode} - ${o.quotaCode}.
 Data: ${JSON.stringify(s)}`),a.push({serviceCode:s.Quota?.ServiceCode,quotaName:s.Quota?.QuotaName,quotaCode:s.Quota?.QuotaCode,value:s.Quota?.Value})}let r=new c.CloudWatchClient;for(let o of a){let u=[{MetricName:"ServiceQuotasApplied",Dimensions:[{Name:"QuotaCode",Value:o.quotaCode},{Name:"QuotaName",Value:o.quotaName},{Name:"ServiceCode",Value:o.serviceCode}],Unit:"Count",Value:o.value}],s={Namespace:e,MetricData:u},l=new c.PutMetricDataCommand(s),v=await r.send(l);console.log(`Successfully pushed metric data to namespace ${e} - ${JSON.stringify(v)}`)}return a.length===0?console.log("No results to publish"):console.log("Successfully pushed metric data"),{servicesQuotasApplied:a}}catch(e){throw console.error(e),e}};0&&(module.exports={monitor});
